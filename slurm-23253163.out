[NbConvertApp] Converting notebook notebooks/hyperparameter_choices/num_rounds.ipynb to notebook
Traceback (most recent call last):
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/bin/jupyter-nbconvert", line 8, in <module>
    sys.exit(main())
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/jupyter_core/application.py", line 283, in launch_instance
    super().launch_instance(argv=argv, **kwargs)
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/traitlets/config/application.py", line 1075, in launch_instance
    app.start()
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbconvert/nbconvertapp.py", line 420, in start
    self.convert_notebooks()
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbconvert/nbconvertapp.py", line 597, in convert_notebooks
    self.convert_single_notebook(notebook_filename)
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbconvert/nbconvertapp.py", line 563, in convert_single_notebook
    output, resources = self.export_single_notebook(
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbconvert/nbconvertapp.py", line 487, in export_single_notebook
    output, resources = self.exporter.from_filename(
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbconvert/exporters/exporter.py", line 201, in from_filename
    return self.from_file(f, resources=resources, **kw)
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbconvert/exporters/exporter.py", line 220, in from_file
    return self.from_notebook_node(
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbconvert/exporters/notebook.py", line 36, in from_notebook_node
    nb_copy, resources = super().from_notebook_node(nb, resources, **kw)
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbconvert/exporters/exporter.py", line 154, in from_notebook_node
    nb_copy, resources = self._preprocess(nb_copy, resources)
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbconvert/exporters/exporter.py", line 353, in _preprocess
    nbc, resc = preprocessor(nbc, resc)
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbconvert/preprocessors/base.py", line 48, in __call__
    return self.preprocess(nb, resources)
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbconvert/preprocessors/execute.py", line 102, in preprocess
    self.preprocess_cell(cell, resources, index)
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbconvert/preprocessors/execute.py", line 123, in preprocess_cell
    cell = self.execute_cell(cell, index, store_history=True)
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib64/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# check for compatibility
simulator, proposal = prepare_for_sbi(simulator_model.simulator, proposal)

# define neural posterior with given parameters for @SNPE
neural_posterior = posterior_nn(
    model=training_params.get('model'), 
    hidden_features=training_params.get('hidden_features'), 
    num_transforms=training_params.get('num_transforms'), 
    num_bins=training_params.get('num_bins')
)

# Set up the inference procedure with the SNPE procedure, and custom neural density estimator
inference = SNPE(prior=prior, density_estimator=neural_posterior)

posteriors = []

for _ in range(training_params.get('num_rounds')):
    simulations, parameters = simulate_for_sbi(
        simulator=simulator, 
        proposal=proposal, 
        num_simulations=simulation_params.get('num_simulations'), 
        num_workers=simulation_params.get('num_workers'), 
        simulation_batch_size=simulation_params.get('simulation_batch_size')
    )

    simulations.to(est_device)
    parameters.to(est_device)

    # Train the neural density estimator
    density_estimator = inference.append_simulations(simulations, parameters, data_device=est_device).train()

    # Build the posterior for the given parameters
    posterior = inference.build_posterior(density_estimator)

    posteriors.append(posterior)

    proposal = posterior.set_default_x(observation)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[6], line 18[0m
[1;32m     15[0m posteriors [38;5;241m=[39m []
[1;32m     17[0m [38;5;28;01mfor[39;00m _ [38;5;129;01min[39;00m [38;5;28mrange[39m(training_params[38;5;241m.[39mget([38;5;124m'[39m[38;5;124mnum_rounds[39m[38;5;124m'[39m)):
[0;32m---> 18[0m     simulations, parameters [38;5;241m=[39m [43msimulate_for_sbi[49m[43m([49m
[1;32m     19[0m [43m        [49m[43msimulator[49m[38;5;241;43m=[39;49m[43msimulator[49m[43m,[49m[43m [49m
[1;32m     20[0m [43m        [49m[43mproposal[49m[38;5;241;43m=[39;49m[43mproposal[49m[43m,[49m[43m [49m
[1;32m     21[0m [43m        [49m[43mnum_simulations[49m[38;5;241;43m=[39;49m[43msimulation_params[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mnum_simulations[39;49m[38;5;124;43m'[39;49m[43m)[49m[43m,[49m[43m [49m
[1;32m     22[0m [43m        [49m[43mnum_workers[49m[38;5;241;43m=[39;49m[43msimulation_params[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mnum_workers[39;49m[38;5;124;43m'[39;49m[43m)[49m[43m,[49m[43m [49m
[1;32m     23[0m [43m        [49m[43msimulation_batch_size[49m[38;5;241;43m=[39;49m[43msimulation_params[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43msimulation_batch_size[39;49m[38;5;124;43m'[39;49m[43m)[49m
[1;32m     24[0m [43m    [49m[43m)[49m
[1;32m     26[0m     simulations[38;5;241m.[39mto(est_device)
[1;32m     27[0m     parameters[38;5;241m.[39mto(est_device)

File [0;32m/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/sbi/inference/base.py:493[0m, in [0;36msimulate_for_sbi[0;34m(simulator, proposal, num_simulations, num_workers, simulation_batch_size, seed, show_progress_bar)[0m
[1;32m    456[0m [38;5;28;01mdef[39;00m [38;5;21msimulate_for_sbi[39m(
[1;32m    457[0m     simulator: Callable,
[1;32m    458[0m     proposal: Any,
[0;32m   (...)[0m
[1;32m    463[0m     show_progress_bar: [38;5;28mbool[39m [38;5;241m=[39m [38;5;28;01mTrue[39;00m,
[1;32m    464[0m ) [38;5;241m-[39m[38;5;241m>[39m Tuple[Tensor, Tensor]:
[1;32m    465[0m [38;5;250m    [39m[38;5;124mr[39m[38;5;124;03m"""Returns ($\theta, x$) pairs obtained from sampling the proposal and simulating.[39;00m
[1;32m    466[0m 
[1;32m    467[0m [38;5;124;03m    This function performs two steps:[39;00m
[0;32m   (...)[0m
[1;32m    490[0m [38;5;124;03m    Returns: Sampled parameters $\theta$ and simulation-outputs $x$.[39;00m
[1;32m    491[0m [38;5;124;03m    """[39;00m
[0;32m--> 493[0m     theta [38;5;241m=[39m [43mproposal[49m[38;5;241;43m.[39;49m[43msample[49m[43m([49m[43m([49m[43mnum_simulations[49m[43m,[49m[43m)[49m[43m)[49m
[1;32m    495[0m     x [38;5;241m=[39m simulate_in_batches(
[1;32m    496[0m         simulator[38;5;241m=[39msimulator,
[1;32m    497[0m         theta[38;5;241m=[39mtheta,
[0;32m   (...)[0m
[1;32m    501[0m         show_progress_bars[38;5;241m=[39mshow_progress_bar,
[1;32m    502[0m     )
[1;32m    504[0m     [38;5;28;01mreturn[39;00m theta, x

File [0;32m/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/torch/distributions/independent.py:101[0m, in [0;36mIndependent.sample[0;34m(self, sample_shape)[0m
[1;32m    100[0m [38;5;28;01mdef[39;00m [38;5;21msample[39m([38;5;28mself[39m, sample_shape[38;5;241m=[39mtorch[38;5;241m.[39mSize()):
[0;32m--> 101[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mbase_dist[49m[38;5;241;43m.[39;49m[43msample[49m[43m([49m[43msample_shape[49m[43m)[49m

File [0;32m/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/torch/distributions/distribution.py:164[0m, in [0;36mDistribution.sample[0;34m(self, sample_shape)[0m
[1;32m    159[0m [38;5;250m[39m[38;5;124;03m"""[39;00m
[1;32m    160[0m [38;5;124;03mGenerates a sample_shape shaped sample or sample_shape shaped batch of[39;00m
[1;32m    161[0m [38;5;124;03msamples if the distribution parameters are batched.[39;00m
[1;32m    162[0m [38;5;124;03m"""[39;00m
[1;32m    163[0m [38;5;28;01mwith[39;00m torch[38;5;241m.[39mno_grad():
[0;32m--> 164[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mrsample[49m[43m([49m[43msample_shape[49m[43m)[49m

File [0;32m/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/torch/distributions/uniform.py:77[0m, in [0;36mUniform.rsample[0;34m(self, sample_shape)[0m
[1;32m     76[0m [38;5;28;01mdef[39;00m [38;5;21mrsample[39m([38;5;28mself[39m, sample_shape[38;5;241m=[39mtorch[38;5;241m.[39mSize()):
[0;32m---> 77[0m     shape [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_extended_shape[49m[43m([49m[43msample_shape[49m[43m)[49m
[1;32m     78[0m     rand [38;5;241m=[39m torch[38;5;241m.[39mrand(shape, dtype[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mlow[38;5;241m.[39mdtype, device[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mlow[38;5;241m.[39mdevice)
[1;32m     79[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mlow [38;5;241m+[39m rand [38;5;241m*[39m ([38;5;28mself[39m[38;5;241m.[39mhigh [38;5;241m-[39m [38;5;28mself[39m[38;5;241m.[39mlow)

File [0;32m/pfs/data5/home/kit/iai/ik6649/Data-Driven-Bayesian-Parameter-Estimation-with-Neural-Networks/.venv/lib64/python3.9/site-packages/torch/distributions/distribution.py:267[0m, in [0;36mDistribution._extended_shape[0;34m(self, sample_shape)[0m
[1;32m    257[0m [38;5;250m[39m[38;5;124;03m"""[39;00m
[1;32m    258[0m [38;5;124;03mReturns the size of the sample returned by the distribution, given[39;00m
[1;32m    259[0m [38;5;124;03ma `sample_shape`. Note, that the batch and event shapes of a distribution[39;00m
[0;32m   (...)[0m
[1;32m    264[0m [38;5;124;03m    sample_shape (torch.Size): the size of the sample to be drawn.[39;00m
[1;32m    265[0m [38;5;124;03m"""[39;00m
[1;32m    266[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(sample_shape, torch[38;5;241m.[39mSize):
[0;32m--> 267[0m     sample_shape [38;5;241m=[39m [43mtorch[49m[38;5;241;43m.[39;49m[43mSize[49m[43m([49m[43msample_shape[49m[43m)[49m
[1;32m    268[0m [38;5;28;01mreturn[39;00m torch[38;5;241m.[39mSize(sample_shape [38;5;241m+[39m [38;5;28mself[39m[38;5;241m.[39m_batch_shape [38;5;241m+[39m [38;5;28mself[39m[38;5;241m.[39m_event_shape)

[0;31mTypeError[0m: torch.Size() takes an iterable of 'int' (item 0 is 'list')


============================= JOB FEEDBACK =============================

NodeName=uc2n512
Job ID: 23253163
Cluster: uc2
User/Group: ik6649/iai
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 40
CPU Utilized: 00:00:09
CPU Efficiency: 0.45% of 00:33:20 core-walltime
Job Wall-clock time: 00:00:50
Memory Utilized: 416.39 MB
Memory Efficiency: 1.04% of 39.06 GB
